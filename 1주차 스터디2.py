'''원소 선택: 행 인덱스와 열 이름을  [행, 열] 형식의 2차원 좌표로 입력하여 원소 위치를 지정함
인덱스 이름: DataFrame 객체.loc[행 인덱스, 열 이름]
정수 위치 인덱스: DataFrame 객체.iloc[행 번호, 열 번호]'''

#<예제 1-11>
import pandas as pd
exam_data = {'이름' : ['서준', '우현', '인아'], '수학' : [90, 80, 70], '영어' : [98, 89, 95], '음악' : [85, 95, 100], '체육' : [100, 90, 90]}
df_1 = pd.DataFrame(exam_data)
df_1.set_index('이름', inplace=True)
print(df_1)

#데이터프레임 df의 특정 원소 1개 선택
a = df_1.loc['서준', '음악']
print(a)
b = df_1.iloc[0, 2]
print(b)

#데이터프레임 df의 특정 원소 2개 이상 선택 ('서준'의 '음악', '체육' 점수)
c = df_1.loc['서준', ['음악', '체육']]
print(c)
d = df_1.iloc[0, [2, 3]]
print(d)
e = df_1.loc['서준', '음악' : '체육']
print(e)
f = df_1.iloc[0, 2:]
print(f)

#df 2개 이상의 행과 열에 속하는 원소들 선택
g = df_1.loc[['서준', '우현'], ['음악', '체육']]
print(g)
h = df_1.iloc[[0, 1], [2, 3]]
print(h)
i = df_1.loc['서준':'우현', '음악':'체육']
print(i)
j = df_1.iloc[0:2, 2:]
print(j)

'''열 추가: 데이터프레임의 마지막 열에 덧붙이듯 새로운 열을 추가함
DataFrame 객체['추가하려는 열 이름'] = 데이터 값'''

#<예제 1-12>
import pandas as pd
exam_data = {'이름' : ['서준', '우현', '인아'], '수학' : [90, 80, 70], '영어' : [98, 89, 95], '음악' : [85, 95, 100], '체육' : [100, 90, 90]}
df_2 = pd.DataFrame(exam_data)
print(df_2)
print('\n')

#데이터프레임 df_2에 '국어' 점수 열 추가. 데이터 값은 80 지정
df_2['국어'] = 80 
print(df_2)

'''행 추가: 데이터프레임의 마지막 행에 덧붙이듯 새로운 열을 추가함
하나의 데이터 값 입력: 행의 모든 원소에 같은 값 추가
열의 개수에 맞게 배열 형태로 여러 개의 값 입력: 배열 순서대로 열 위치에 값이 하나씩 추가'''

#<예제 1-13>
import pandas as pd
exam_data = {'이름' : ['서준', '우현', '인아'], '수학' : [90, 80, 70], '영어' : [98, 89, 95], '음악' : [85, 95, 100], '체육' : [100, 90, 90]}
df_3 = pd.DataFrame(exam_data)
print(df_3)
print('\n')

#새로운 행 추가 - 같은 원소 값 입력
df_3.loc[3] = 0
print(df_3)
print('\n')

#새로운 행 추가 - 원소 값 여러 개의 배열 입력
df_3.loc[4] = ['동규', 90, 80, 70, 60]
print(df_3)
print('\n')

#새로운 행 추가 - 기존 행 복사
df_3.loc['행5'] = df_3.loc[3]
print(df_3)

'''원소 값 변경: 데이터프레임의 특정 원소를 선택하고 새로운 데이터 값을 지정해주면 원소 값 변경됨
1개를 선택해 변경 가능, 여러 개 원소 선택해 한꺼번에 변경 가능
변경할 원소를 데이터프레임 인덱싱과 슬라이싱 기법 사용
원소 값 변경: DataFrame 객체의 일부분 또는 원소를 선택 = 새로운 값'''

#<예제 1-14>
import pandas as pd
exam_data = {'이름' : ['서준', '우현', '인아'], '수학' : [90, 80, 70], '영어' : [98, 89, 95], '음악' : [85, 95, 100], '체육' : [100, 90, 90]}
df_4 = pd.DataFrame(exam_data)

df_4.set_index('이름', inplace=True)
print(df_4)
print('\n')

#데이터프레임 df의 특정 원소를 변경하는 방법: '서준'의 '체육' 점수
df_4.iloc[0][3] = 80
print(df_4)
print('\n')

df_4.loc['서준']['체육'] = 90
print(df_4)
print('\n')

df_4.loc['서준', '체육'] = 100
print(df_4)

#데이터프레임 df의 원소 여러 개를 변경하는 방법: '서준'의 '음악', '체육' 점수
df_4.loc['서준', ['음악', '체육']] = 50
print(df_4)
print('\n')

df_4.loc['서준', ['음악', '체육']] = 100, 50
print(df_4)


'''행, 열의 위치 바꾸기: 데이터프레임의 행과 열을 서로 맞바꾸는 방법
전치의 결과로 새로운 객체를 반환하므로, 기존 객체를 변경하기 위해서는 df = df.transpose() 또는 df = df.T와 같이 기존 객체에 새로운 객체를 할당해주는 과정이 필요함
행, 열 바꾸기: DataFrame 객체.transpose() 또는 DataFrame 객체.T'''

#예제<1-15>
import pandas as pd
exam_data = {'이름' : ['서준', '우현', '인아'], '수학' : [90, 80, 70], '영어' : [98, 89, 95], '음악' : [85, 95, 100], '체육' : [100, 90, 90]}
df_5 = pd.DataFrame(exam_data)
print(df_5)
print('\n')

#데이터프레임 df를 전치
df_5 = df_5.transpose()
print(df_5)
print('\n')

#데이터프레임 df를 다시 전치 
df_5 = df_5.T
print(df_5) 







